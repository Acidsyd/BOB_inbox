name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '14'

jobs:
  # Backend Unit Tests
  backend-unit-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mailsender_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Setup test database
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mailsender_test
        run: |
          npm run db:migrate
          npm run db:seed

      - name: Run backend unit tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mailsender_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
        run: |
          npm run test:unit -- --coverage --coverageDirectory=coverage/unit
          
      - name: Upload backend unit test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/unit/lcov.info
          flags: backend-unit
          name: backend-unit-coverage

  # Backend Integration Tests
  backend-integration-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mailsender_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Setup test database
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mailsender_test
        run: |
          npm run db:migrate
          npm run db:seed

      - name: Run backend integration tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mailsender_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_TEST_ANON_KEY }}
        run: |
          npm run test:integration -- --coverage --coverageDirectory=coverage/integration
          
      - name: Upload backend integration test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/integration/lcov.info
          flags: backend-integration
          name: backend-integration-coverage

  # Frontend Unit Tests
  frontend-unit-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend unit tests
        working-directory: ./frontend
        env:
          NODE_ENV: test
          NEXT_PUBLIC_API_URL: http://localhost:3001
        run: |
          npm run test -- --coverage --coverageDirectory=coverage --watchAll=false
          
      - name: Upload frontend test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mailsender_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Install Playwright Browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: Setup test database
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mailsender_test
        run: |
          npm run db:migrate
          npm run db:seed

      - name: Start backend server
        working-directory: ./backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mailsender_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          PORT: 3001
        run: |
          npm start &
          sleep 10
        
      - name: Start frontend server
        working-directory: ./frontend
        env:
          NODE_ENV: test
          NEXT_PUBLIC_API_URL: http://localhost:3001
          PORT: 3000
        run: |
          npm run build
          npm start &
          sleep 15

      - name: Run Playwright tests
        working-directory: ./frontend
        env:
          BASE_URL: http://localhost:3000
          API_URL: http://localhost:3001
        run: |
          npx playwright test --reporter=html,json
          
      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results
          path: frontend/test-results/
          retention-days: 30

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mailsender_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Install Playwright Browsers
        working-directory: ./frontend
        run: npx playwright install chromium

      - name: Setup test database with performance data
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mailsender_test
        run: |
          npm run db:migrate
          npm run db:seed:performance

      - name: Start services for performance testing
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mailsender_test
          REDIS_URL: redis://localhost:6379
        run: |
          cd backend && npm start &
          cd frontend && npm run build && npm start &
          sleep 20

      - name: Run performance tests
        working-directory: ./frontend
        run: |
          npx playwright test --config=playwright-performance.config.js --reporter=json
          
      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-reports
          path: frontend/performance-reports/
          retention-days: 30

  # Security Tests
  security-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run security audit
        run: |
          cd backend && npm audit --audit-level high
          cd ../frontend && npm audit --audit-level high

      - name: Install Playwright for security tests
        working-directory: ./frontend
        run: npx playwright install chromium

      - name: Run security tests
        working-directory: ./frontend
        run: |
          npx playwright test --config=playwright-security.config.js
          
      - name: Upload security test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-test-results
          path: frontend/security-reports/
          retention-days: 30

  # Accessibility Tests
  accessibility-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Install Playwright for accessibility tests
        working-directory: ./frontend
        run: npx playwright install chromium

      - name: Run accessibility tests
        working-directory: ./frontend
        run: |
          npx playwright test --config=playwright-accessibility.config.js
          
      - name: Upload accessibility test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-test-results
          path: frontend/accessibility-reports/
          retention-days: 30

  # Coverage Report
  coverage-report:
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, backend-integration-tests, frontend-unit-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install -g nyc

      - name: Download all coverage reports
        uses: actions/download-artifact@v3

      - name: Generate combined coverage report
        run: |
          mkdir -p coverage-combined
          # Combine coverage from different test suites
          nyc merge backend/coverage coverage-combined/backend.json
          nyc merge frontend/coverage coverage-combined/frontend.json
          
      - name: Generate coverage summary
        run: |
          echo "# Test Coverage Summary" > coverage-summary.md
          echo "" >> coverage-summary.md
          echo "## Backend Coverage" >> coverage-summary.md
          nyc report --reporter=text-summary --temp-dir=coverage-combined >> coverage-summary.md
          echo "" >> coverage-summary.md
          echo "## Frontend Coverage" >> coverage-summary.md
          nyc report --reporter=text-summary --temp-dir=coverage-combined >> coverage-summary.md

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const coverageSummary = fs.readFileSync('coverage-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageSummary
            });

      - name: Upload combined coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage-combined
          flags: combined
          name: combined-coverage

  # Test Quality Gates
  quality-gates:
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, backend-integration-tests, frontend-unit-tests, e2e-tests, performance-tests, security-tests, accessibility-tests]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.backend-unit-tests.result }}" != "success" ]]; then
            echo "Backend unit tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.backend-integration-tests.result }}" != "success" ]]; then
            echo "Backend integration tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.frontend-unit-tests.result }}" != "success" ]]; then
            echo "Frontend unit tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.e2e-tests.result }}" != "success" ]]; then
            echo "E2E tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.performance-tests.result }}" != "success" ]]; then
            echo "Performance tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.security-tests.result }}" != "success" ]]; then
            echo "Security tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.accessibility-tests.result }}" != "success" ]]; then
            echo "Accessibility tests failed"
            exit 1
          fi
          
          echo "All test suites passed!"

  # Deploy to staging on successful tests (main branch only)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment script here
          
      - name: Run smoke tests on staging
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke test commands here