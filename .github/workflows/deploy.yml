# Fresh Deployment to Digital Ocean
name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment: production
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup SSH connection
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

    - name: Debug SSH
      run: |
        echo "SSH_AUTH_SOCK: $SSH_AUTH_SOCK"
        ssh-add -L || echo "No keys in agent"

    - name: Test SSH connection
      run: |
        ssh -v -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "echo 'SSH connection successful'" 2>&1 | tail -20
        
    - name: Deploy using MCP-enhanced script
      run: |
        # Use our MCP-enhanced deployment script
        export DEPLOY_HOST="${{ secrets.DEPLOY_HOST }}"
        export DEPLOY_USER="${{ secrets.DEPLOY_USER }}"

        # Configure git for tagging
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

        # Create deployment tag with Git MCP patterns
        DEPLOYMENT_TAG="deploy-$(date +%Y%m%d-%H%M%S)"
        git tag -a "$DEPLOYMENT_TAG" -m "GitHub Actions deployment $(date)"
        git push origin "$DEPLOYMENT_TAG"
        
        # Deploy to server with enhanced error handling
        ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << EOF
          set -e
          
          # Set deployment variables
          APP_DIR="/var/www/mailsender"
          DEPLOYMENT_ID="deploy-\$(date +%s)"
          DEPLOYMENT_TAG="$DEPLOYMENT_TAG"
          
          echo "üöÄ Starting MCP-enhanced deployment: \$DEPLOYMENT_ID"
          echo "üìã Deployment tag: \$DEPLOYMENT_TAG"
          
          # Pre-deployment checks
          echo "üîç Running pre-deployment checks..."

          # Fix git ownership issue
          echo "üìù Fixing git ownership..."
          git config --global --add safe.directory /var/www/mailsender || true

          # Clean up disk space before deployment
          echo "üßπ Cleaning up disk space..."

          # Remove old backups (keep only last 2)
          if [ -d "/var/backups/mailsender" ]; then
            cd /var/backups/mailsender
            ls -t | tail -n +3 | xargs -r rm -rf || true
            echo "‚úÖ Old backups cleaned"
          fi

          # Clean old PM2 logs
          pm2 flush || true
          if [ -d "/var/log/mailsender" ]; then
            find /var/log/mailsender -name "*.log" -mtime +7 -delete || true
            echo "‚úÖ Old PM2 logs cleaned"
          fi

          # Clean npm cache if disk usage > 90%
          DISK_USAGE=\$(df / | tail -1 | awk '{print \$5}' | sed 's/%//')
          if [ "\$DISK_USAGE" -gt 90 ]; then
            echo "‚ö†Ô∏è  High disk usage (\$DISK_USAGE%), cleaning npm cache..."
            npm cache clean --force || true
          fi

          echo "üíæ Current disk usage:"
          df -h / || true

          # Create app directory if it doesn't exist
          mkdir -p \$APP_DIR
          
          # If app exists, verify it's a git repo and create backup
          if [ -d "\$APP_DIR/.git" ]; then
            cd \$APP_DIR
            
            # Stop services gracefully
            echo "‚èπÔ∏è Stopping services..."
            pm2 stop all || true
            
            # Create backup
            echo "üíæ Creating backup..."
            mkdir -p /var/backups/mailsender
            cp -r . "/var/backups/mailsender/backup-\$DEPLOYMENT_ID" || true
            
            # Fetch and checkout the deployment tag
            echo "üì• Pulling latest code..."
            git fetch --all --tags
            git checkout "\$DEPLOYMENT_TAG"
          else
            # Fresh installation
            echo "üì¶ Fresh installation detected..."
            cd /tmp
            
            # Install system dependencies
            echo "üì¶ Installing system dependencies..."
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - || true
            apt-get update && apt-get install -y nodejs || true
            npm install -g pm2 || true
            
            # Clone repository
            rm -rf mailsender-temp || true
            git clone --branch main --single-branch https://github.com/Acidsyd/BOB_inbox.git mailsender-temp
            cd mailsender-temp
            git checkout "\$DEPLOYMENT_TAG"
            
            # Move to app directory
            mv * \$APP_DIR/ 2>/dev/null || true
            mv .* \$APP_DIR/ 2>/dev/null || true
            cd \$APP_DIR
            
            # Cleanup temp directory
            rm -rf /tmp/mailsender-temp || true
          fi
          
          # Application setup
          echo "üî® Building application..."
          
          # Setup environment if it doesn't exist
          if [ ! -f ".env.production" ]; then
            cp .env.production.example .env.production || true
          fi
          
          # Install dependencies and build
          npm run setup || npm install
          npm run build || true
          
          # Setup production services
          if [ -f "scripts/production-setup.sh" ]; then
            echo "üåê Running production setup..."
            chmod +x scripts/production-setup.sh
            ./scripts/production-setup.sh || true
          fi
          
          # Start services with PM2
          echo "üöÄ Starting services..."
          if [ -f "ecosystem.config.cjs" ]; then
            pm2 restart ecosystem.config.cjs || pm2 start ecosystem.config.cjs
          elif [ -f "ecosystem.config.js" ]; then
            mv ecosystem.config.js ecosystem.config.cjs
            pm2 restart ecosystem.config.cjs || pm2 start ecosystem.config.cjs
          else
            # Fallback service start
            pm2 start backend/src/server.js --name mailsender-backend || true
            pm2 start "npm run start" --name mailsender-frontend || true
          fi
          
          # Start nginx if available
          systemctl restart nginx || true
          systemctl enable nginx || true
          
          # Wait for services to start
          sleep 15
          
          # Health checks
          echo "üîç Running health checks..."
          curl -f http://localhost:4000/health || echo "‚ö†Ô∏è Backend health check failed"
          curl -f http://localhost:3001 || echo "‚ö†Ô∏è Frontend health check failed"
          
          # Show service status
          pm2 status
          
          echo "‚úÖ MCP-enhanced deployment \$DEPLOYMENT_ID completed successfully!"
          echo "üìä Deployment tag: \$DEPLOYMENT_TAG"
          
        EOF
        
    - name: Health check
      run: |
        echo "üîç Running health checks..."
        sleep 30
        
        # Check if services are running
        ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          echo "Checking service status..."
          pm2 status || true
          systemctl status nginx --no-pager || true
        EOF
        
    - name: Deployment summary
      if: success()
      run: |
        echo "üéâ DEPLOYMENT SUCCESSFUL!"
        echo "========================="
        echo "‚úÖ Fresh installation completed"
        echo "‚úÖ Node.js and PM2 installed"
        echo "‚úÖ Application built and configured"
        echo ""
        echo "üåê Production URL: https://${{ secrets.DEPLOY_HOST }}"
        echo "üìä SSH access: ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}"
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå DEPLOYMENT FAILED!"
        echo "===================="
        echo "Check the logs above for details."
        echo "Manual recovery: ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}"