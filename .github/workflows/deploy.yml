# Automatic Deploy to Digital Ocean Production
name: Deploy to Digital Ocean

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    name: Deploy to Digital Ocean
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH Key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
        
    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H qquadro.com >> ~/.ssh/known_hosts
        
    - name: Deploy to Digital Ocean
      run: |
        echo "🚀 Starting deployment to Digital Ocean (SSH version)..."
        ssh -o StrictHostKeyChecking=no root@qquadro.com << 'EOF'
          # Remove set -e temporarily for better debugging
          
          echo "📂 Setting up application directory..."
          cd /root || { echo "❌ Failed to cd to /root"; exit 1; }
          
          echo "🔍 Current directory: $(pwd)"
          echo "🔍 Available space: $(df -h /root)"
          echo "🔍 Git version: $(git --version)"
          
          # Remove existing directory if it exists
          if [ -d "mailsender" ]; then
            echo "🔄 Removing existing directory..."
            rm -rf mailsender || { echo "❌ Failed to remove mailsender directory"; exit 1; }
          fi
          
          echo "🔄 Cloning repository..."
          echo "🔗 Repository URL: git@github.com:Acidsyd/BOB_inbox.git (SSH)"
          
          # Add GitHub to known hosts to prevent SSH verification prompts
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts 2>/dev/null || echo "⚠️ Failed to add GitHub to known hosts"
          
          # Configure git to use SSH instead of HTTPS
          git config --global url."git@github.com:".insteadOf "https://github.com/"
          
          # Clone using SSH
          git clone git@github.com:Acidsyd/BOB_inbox.git mailsender
          clone_exit_code=$?
          
          if [ $clone_exit_code -ne 0 ]; then
            echo "❌ Git clone failed with exit code: $clone_exit_code"
            echo "🔍 Trying to diagnose the issue..."
            
            # Test network connectivity
            echo "🌐 Testing network connectivity to GitHub..."
            ping -c 3 github.com || echo "⚠️ Cannot reach github.com"
            
            # Test DNS resolution
            echo "🔍 DNS lookup for github.com:"
            nslookup github.com || echo "⚠️ DNS lookup failed"
            
            # Try with verbose git clone using SSH
            echo "🔍 Attempting verbose git clone with SSH..."
            git clone --verbose git@github.com:Acidsyd/BOB_inbox.git mailsender-debug
            
            exit 1
          fi
          
          cd mailsender || { echo "❌ Failed to cd to mailsender"; exit 1; }
          echo "✅ Repository cloned successfully"
          
          echo "📋 Current directory contents:"
          ls -la
          
          echo "🔍 Git status:"
          git status
          
          echo "🔄 Ensuring we're on main branch..."
          git branch -a
          git checkout main || { echo "⚠️ No main branch, staying on current branch"; }
          
          # Continue with deployment only if we got this far
          set -e
          
          echo "🛑 Stopping existing containers..."
          docker-compose -f docker-compose.production.yml down --remove-orphans
          
          echo "🏗️ Building and starting containers..."
          docker-compose -f docker-compose.production.yml up -d --build --force-recreate
          
          echo "⏳ Waiting for services to start..."
          sleep 30
          
          echo "🔍 Checking service health..."
          docker-compose -f docker-compose.production.yml ps
          
          echo "📊 Service logs (last 20 lines)..."
          docker-compose -f docker-compose.production.yml logs --tail=20 backend frontend nginx
          
          echo "✅ Deployment completed successfully!"
        EOF
        
    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        
        # Wait a bit for services to fully start
        sleep 15
        
        # Check if the site is responding
        if curl -f -s https://qquadro.com > /dev/null; then
          echo "✅ Website is responding!"
        else
          echo "❌ Website check failed!"
          exit 1
        fi
        
        # Check API health endpoint
        if curl -f -s https://qquadro.com/api/health > /dev/null; then
          echo "✅ API health check passed!"
        else
          echo "⚠️ API health check failed (might be normal during startup)"
        fi
        
    - name: Deployment summary
      run: |
        echo "🎉 DEPLOYMENT SUCCESSFUL!"
        echo "========================="
        echo "✅ Code deployed to Digital Ocean"
        echo "✅ Docker containers rebuilt and restarted"
        echo "✅ Services health checked"
        echo ""
        echo "🌐 Production URL: https://qquadro.com"
        echo "📊 Check logs: ssh root@qquadro.com 'cd /root/mailsender && docker-compose -f docker-compose.production.yml logs'"
        echo ""
        echo "🚀 Your CSV uploader and all fixes are now live!"
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ DEPLOYMENT FAILED!"
        echo "===================="
        echo "Please check the logs above for details."
        echo "You can manually deploy by running:"
        echo "ssh root@qquadro.com"
        echo "cd /root/mailsender && git pull && docker-compose -f docker-compose.production.yml up -d --build"