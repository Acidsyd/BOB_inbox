# Fresh Deployment to Digital Ocean
name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH connection
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          
    - name: Test SSH connection
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "echo 'SSH connection successful'"
        
    - name: Deploy to server
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          set -e
          echo "üöÄ Starting fresh deployment..."
          
          # Set up application directory
          APP_DIR="/var/www/mailsender"
          
          # Stop existing services if any
          echo "‚èπÔ∏è Stopping existing services..."
          systemctl stop mailsender-backend || true
          systemctl stop mailsender-frontend || true
          systemctl stop nginx || true
          
          # Create app directory
          echo "üìÅ Setting up application directory..."
          mkdir -p $APP_DIR
          cd $APP_DIR
          
          # Remove existing files
          rm -rf * .* 2>/dev/null || true
          
          # Clone repository using HTTPS (more reliable)
          echo "üì• Cloning repository..."
          git clone https://github.com/Acidsyd/BOB_inbox.git .
          
          # Setup environment
          echo "‚öôÔ∏è Setting up environment..."
          cp .env.production.example .env.production
          
          # Install Node.js 20 if not present
          echo "üì¶ Installing Node.js..."
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          apt-get install -y nodejs
          
          # Install PM2 globally
          echo "üîß Installing PM2..."
          npm install -g pm2
          
          # Install dependencies and build
          echo "üî® Building application..."
          npm run setup
          npm run build
          
          # Setup production environment
          echo "üåê Setting up production environment..."
          npm run production:setup
          
          echo "‚úÖ Deployment completed successfully!"
        EOF
        
    - name: Health check
      run: |
        echo "üîç Running health checks..."
        sleep 30
        
        # Check if services are running
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          echo "Checking service status..."
          pm2 status || true
          systemctl status nginx --no-pager || true
        EOF
        
    - name: Deployment summary
      if: success()
      run: |
        echo "üéâ DEPLOYMENT SUCCESSFUL!"
        echo "========================="
        echo "‚úÖ Fresh installation completed"
        echo "‚úÖ Node.js and PM2 installed"
        echo "‚úÖ Application built and configured"
        echo ""
        echo "üåê Production URL: https://${{ secrets.DEPLOY_HOST }}"
        echo "üìä SSH access: ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}"
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå DEPLOYMENT FAILED!"
        echo "===================="
        echo "Check the logs above for details."
        echo "Manual recovery: ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}"