# Simple Deploy to Digital Ocean Production
name: Deploy to Production

on:
  push:
    branches: [main]

jobs:
  deploy-production:
    name: Deploy to Digital Ocean
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push'
    environment: production
    
    steps:
    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H qquadro.com >> ~/.ssh/known_hosts
        
        # Test SSH connection
        ssh -o StrictHostKeyChecking=no root@qquadro.com "echo 'SSH connection successful'"
        
    - name: Deploy to Production Server
      run: |
        echo "🚀 Starting deployment to qquadro.com..."
        
        ssh -o StrictHostKeyChecking=no root@qquadro.com << 'DEPLOY_SCRIPT'
        set -e
        
        # Colors for output
        GREEN='\033[0;32m'
        BLUE='\033[0;34m'
        NC='\033[0m'
        
        log_info() {
            echo -e "${BLUE}[INFO]${NC} $1"
        }
        
        log_success() {
            echo -e "${GREEN}[SUCCESS]${NC} $1"
        }
        
        echo -e "${BLUE}"
        echo "========================================="
        echo " 🚀 AUTOMATED GITHUB DEPLOYMENT"
        echo " Digital Ocean Production Server"
        echo "========================================="
        echo -e "${NC}"
        
        # Navigate to application directory
        cd /root/mailsender || cd /opt/mailsender || cd ~/mailsender || {
            echo "Application directory not found!"
            exit 1
        }
        
        log_info "Current directory: $(pwd)"
        
        # Step 1: Pull latest changes from GitHub
        log_info "Fetching latest changes from GitHub..."
        git fetch origin
        git reset --hard origin/main
        
        if [ $? -ne 0 ]; then
            echo "Failed to pull latest changes"
            exit 1
        fi
        
        log_success "✅ Latest changes pulled successfully"
        
        # Step 2: Verify configuration files exist
        if [ ! -f "docker-compose.production.yml" ]; then
            echo "docker-compose.production.yml not found!"
            exit 1
        fi
        
        if [ ! -f "nginx/server.conf" ]; then
            echo "nginx/server.conf not found!"
            exit 1
        fi
        
        log_info "✅ Configuration files verified"
        
        # Step 3: Stop current services
        log_info "Stopping current Docker services..."
        docker-compose -f docker-compose.production.yml down --timeout 30
        
        # Step 4: Start services with new configuration
        log_info "Building and starting services with updated configuration..."
        log_info "📋 This includes the 413 error fixes for CSV uploads..."
        
        docker-compose -f docker-compose.production.yml up -d --build --force-recreate
        
        if [ $? -ne 0 ]; then
            echo "❌ Failed to start services"
            exit 1
        fi
        
        log_success "✅ Services built and started successfully"
        
        # Step 5: Wait for services to initialize
        log_info "⏳ Waiting for services to initialize (30 seconds)..."
        sleep 30
        
        # Step 6: Basic health check
        log_info "🔍 Testing nginx configuration..."
        if docker-compose -f docker-compose.production.yml exec -T nginx nginx -t; then
            log_success "✅ Nginx configuration is valid"
        else
            echo "❌ Nginx configuration test failed"
        fi
        
        # Show running containers
        log_info "📋 Current running containers:"
        docker-compose -f docker-compose.production.yml ps
        
        echo
        echo -e "${GREEN}==========================================="
        echo " 🎉 DEPLOYMENT COMPLETED SUCCESSFULLY!"
        echo ""
        echo " Applied fixes:"
        echo " ✅ Updated nginx server.conf (200MB CSV limit)"
        echo " ✅ Fixed Express.js body limits (100MB)"
        echo " ✅ Extended upload timeouts (600s)"
        echo ""
        echo " 🎯 The 413 'Payload Too Large' errors"
        echo "    should now be resolved!"
        echo ""
        echo " 🌐 Test CSV uploads at: https://qquadro.com"
        echo "==========================================="
        echo -e "${NC}"
        
        DEPLOY_SCRIPT
        
    - name: Deployment Summary
      run: |
        echo "📋 DEPLOYMENT SUMMARY"
        echo "====================="
        echo "✅ Latest changes pulled to production server"
        echo "✅ Docker containers rebuilt and restarted"
        echo "✅ Nginx configuration updated with 413 error fixes"
        echo "✅ Health checks completed"
        echo ""
        echo "🎯 CSV Upload Fix Status: DEPLOYED"
        echo "📏 New upload limit: 200MB"
        echo "🌐 Production URL: https://qquadro.com"
        echo ""
        echo "🚀 Deployment completed successfully!"