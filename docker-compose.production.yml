version: '3.8'

networks:
  mailsender-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

services:
  # Nginx Load Balancer & SSL Termination
  nginx:
    image: nginx:alpine
    container_name: mailsender-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - nginx-cache:/var/cache/nginx
    networks:
      - mailsender-network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
      args:
        - NODE_ENV=production
        - NEXT_TELEMETRY_DISABLED=1
    container_name: mailsender-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL}
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
    networks:
      - mailsender-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
      args:
        - NODE_ENV=production
    container_name: mailsender-backend
    restart: unless-stopped
    environment:
      # Core Configuration
      - NODE_ENV=production
      - PORT=4000
      - FRONTEND_URL=${FRONTEND_URL}
      
      # Database Configuration
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      
      # Redis Configuration
      - REDIS_URL=${REDIS_URL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB}
      
      # Security Configuration
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - EMAIL_ENCRYPTION_KEY=${EMAIL_ENCRYPTION_KEY}
      
      # OAuth2 Configuration
      - GOOGLE_OAUTH2_CLIENT_ID=${GOOGLE_OAUTH2_CLIENT_ID}
      - GOOGLE_OAUTH2_CLIENT_SECRET=${GOOGLE_OAUTH2_CLIENT_SECRET}
      - GOOGLE_OAUTH2_REDIRECT_URI=${GOOGLE_OAUTH2_REDIRECT_URI}
      
      # Stripe Configuration
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      
      # Logging & Monitoring
      - LOG_LEVEL=info
      - LOG_FILE_PATH=/app/logs
      - SENTRY_DSN=${SENTRY_DSN}
      
      # Performance & Security
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
    volumes:
      - ./logs/backend:/app/logs
      - backend-uploads:/app/uploads
    networks:
      - mailsender-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Redis Cache & Queue Service
  redis:
    image: redis:7-alpine
    container_name: mailsender-redis
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - mailsender-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Cron Email Processor Service
  cron-processor:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
      args:
        - NODE_ENV=production
    container_name: mailsender-cron
    restart: unless-stopped
    command: ["npm", "run", "cron"]
    environment:
      # Same as backend but optimized for workers
      - NODE_ENV=production
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - EMAIL_ENCRYPTION_KEY=${EMAIL_ENCRYPTION_KEY}
      - GOOGLE_OAUTH2_CLIENT_ID=${GOOGLE_OAUTH2_CLIENT_ID}
      - GOOGLE_OAUTH2_CLIENT_SECRET=${GOOGLE_OAUTH2_CLIENT_SECRET}
      - LOG_LEVEL=info
      - LOG_FILE_PATH=/app/logs
    volumes:
      - ./logs/cron:/app/logs
      - backend-uploads:/app/uploads
    networks:
      - mailsender-network
    depends_on:
      - redis
      - backend
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Monitoring & Health Check Service
  healthcheck:
    image: curlimages/curl:latest
    container_name: mailsender-healthcheck
    restart: unless-stopped
    command: >
      sh -c "
      while true; do
        echo 'Running health checks...'
        curl -f http://backend:4000/api/health || echo 'Backend health check failed'
        curl -f http://frontend:3000/api/health || echo 'Frontend health check failed'
        sleep 60
      done
      "
    networks:
      - mailsender-network
    depends_on:
      - frontend
      - backend
    deploy:
      resources:
        limits:
          memory: 32M
          cpus: '0.1'

volumes:
  redis-data:
    driver: local
  nginx-cache:
    driver: local
  backend-uploads:
    driver: local

# Production-specific configurations
configs:
  nginx_config:
    file: ./nginx/production.conf
  redis_config:
    file: ./redis/redis.conf

# Secrets management (use Docker secrets or external secret management)
secrets:
  jwt_secret:
    external: true
  stripe_secret:
    external: true
  oauth2_secret:
    external: true